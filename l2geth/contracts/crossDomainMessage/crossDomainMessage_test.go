package crossDomainMessage

import (
	"encoding/hex"
	"fmt"
	"log"
	"strconv"
	"testing"
)

func TestUnpacket(t *testing.T) {
	da := "0xcbd4ece90000000000000000000000004200000000000000000000000000000000000020000000000000000000000000d9e2f450525079e1e29fb23bc7caca6f61f8fd4a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000001240fae75d9000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000063971e7900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004000000000000000000000000d5750ebe91654ab6e345fd1c6f97348265e5ef9f000000000000000000000000d5751caac4cc34f9147fd2d856abef1c54e8b22b000000000000000000000000d5752dbebc3fbdee41f2f8dd7286d471517de7e9000000000000000000000000d5753cf7f8a55bb03e24841af6b7e98644c2883600000000000000000000000000000000000000000000000000000000"
	//+
	//"000000000000000000000000d9e2f450525079e1e29fb23bc7caca6f61f8fd4a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000001240fae75d9000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000063971e7900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004000000000000000000000000d5750ebe91654ab6e345fd1c6f97348265e5ef9f000000000000000000000000d5751caac4cc34f9147fd2d856abef1c54e8b22b000000000000000000000000d5752dbebc3fbdee41f2f8dd7286d471517de7e9000000000000000000000000d5753cf7f8a55bb03e24841af6b7e98644c2883600000000000000000000000000000000000000000000000000000000"
	//decodedData, err := hex.DecodeString(da)
	//if err != nil {
	//	log.Fatal(err)
	//}
	st := "0xcbd4ece9000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead2222000000000000000000000000d9e2f450525079e1e29fb23bc7caca6f61f8fd4a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000024f523f40d00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000"
	fmt.Println("st[34:74]=", st[34:74])
	fmt.Println("st[362:402]=", st[362:402])
	fmt.Println("st[98:138]=", st[98:138])

	if parseUint, err := strconv.ParseUint(st[362:402], 16, 32); err != nil {
		panic(err)
	} else {
		fmt.Println(parseUint)
	}

	fmt.Println(da[2:34])
	var data Data
	messageABI = Abi()
	decodedSig, err := hex.DecodeString(da[2:34])
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(da[34:])

	// recover Method from signature and ABI
	method, err := messageABI.MethodById(decodedSig)
	if err != nil {
		log.Fatal(err)
	}

	// decode txInput Payload
	decodedData, err := hex.DecodeString(da[34:])
	if err != nil {
		log.Fatal(err)
	}
	err = method.Inputs.Unpack(&data, decodedData)
	if err != nil {
		log.Fatal(err)
	}
	//if err := UnPacketData(decodedData, data); err != nil {
	//	log.Fatal(err)
	//}
	fmt.Println(data)
}
